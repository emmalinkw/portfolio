---
import {icons as lucideIconsJSON} from '@iconify-json/lucide';
import type {icons as lucideIcons} from '@iconify-json/lucide/icons.json';
import {getIconData, iconToSVG, replaceIDs} from '@iconify/utils';
import {AstroError} from 'astro/errors';
import type {HTMLAttributes} from 'astro/types';

interface SVGAttributes extends HTMLAttributes<'svg'> {
    // biome-ignore lint/suspicious/noExplicitAny: Allow any string index
    [key: string]: any;
}

interface LucideProps extends HTMLAttributes<'svg'> {
    type: 'lucide';
    name: keyof typeof lucideIcons;
}

type Props = LucideProps;

const {type, name, ...props} = Astro.props;
const attributes = props as SVGAttributes;

if (type !== 'lucide' && type !== 'simple-icons') {
    throw new AstroError(`Invalid icon type "${type}"`);
}

// biome-ignore lint/suspicious/noExplicitAny: Needed type not exported
let iconData: any;
iconData = getIconData(lucideIconsJSON, name);

if (!iconData) {
    throw new AstroError(`Icon "${name}" is missing`);
}

const renderData = iconToSVG(iconData, {
    height: attributes.height || 24,
    width: attributes.width || 24,
});

const body = replaceIDs(renderData.body);

let renderAttribsHTML =
    body.indexOf('xlink:') === -1 ? '' : ' xmlns:xlink="http://www.w3.org/1999/xlink"';

for (const attr in attributes) {
    renderAttribsHTML += ` ${attr}="${attributes[attr]}"`;
}

const svg = `<svg xmlns="http://www.w3.org/2000/svg"${renderAttribsHTML}>${body}</svg>`;
---

<Fragment set:html={svg}/>